{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpC,IAAIC,EAAa,KACbC,EAAY,KACZC,EAAc,KAElB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAIPR,EAAKgB,iBAAiB,UAEtB,SAAkCC,GAChCA,EAAMC,iBAEN,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAEVpB,EAAac,EAAMM,cAAcf,MAAMgB,MACvCpB,EAAYa,EAAMM,cAAcF,KAAKG,MACrCnB,EAAcY,EAAMM,cAAcD,OAAOE,MAEzClB,EAAc,EAAGH,GACdsB,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,UAEtDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBV,EAAA4B,OAAOG,QAAQ,sBAAoBtB,QAAiBC,UAGxD,IAAK,IAAIsB,EAAI,EAAGA,GAAKzB,EAAayB,GAAK,EACrC3B,EAAa4B,SAAS5B,EAAY,IAAM4B,SAAS3B,EAAW,IAC5DE,EAAcwB,EAAG3B,GACdsB,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,UAEtDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBV,EAAA4B,OAAOG,QAAQ,sBAAoBtB,QAAeC,UAIxDS,EAAMM,cAAcS","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nlet delayValue = null;\nlet stepValue = null;\nlet amountValue = null;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', submitingOfCreatePromise);\n\nfunction submitingOfCreatePromise(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  delayValue = event.currentTarget.delay.value;\n  stepValue = event.currentTarget.step.value;\n  amountValue = event.currentTarget.amount.value;\n\n  createPromise(1, delayValue)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n  for (let i = 2; i <= amountValue; i += 1) {\n    delayValue = parseInt(delayValue, 10) + parseInt(stepValue, 10);\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n\n  event.currentTarget.reset();\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayValue","$47d4ff9957288465$var$stepValue","$47d4ff9957288465$var$amountValue","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","value","then","Notify","success","catch","failure","i","parseInt","reset"],"version":3,"file":"03-promises.e747452e.js.map"}